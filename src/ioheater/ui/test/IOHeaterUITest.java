/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package ioheater.ui.test;

import com.phidgets.InterfaceKitPhidget;
import ioheater.ui.IOHeaterUI;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author jshaw
 */
public class IOHeaterUITest extends javax.swing.JFrame {

    private Timer timer;
    private static final Logger logger = Logger.getLogger("ioheater.uitest.ioheateruitest");

    /**
     * Creates new form IOHeaterUITest
     */
    public IOHeaterUITest() {
        initComponents();
    }
    
    private void startTimer() {
        int timerInterval = Integer.parseInt(this.timerInterval.getText());
        this.timer = new Timer();
        this.timer.scheduleAtFixedRate(new UpdateTemperatureTask(this), timerInterval, timerInterval);
    }
    
    private void stopTimer() {
        this.timer.cancel();
    }
    
    /**
     *
     * @throws Exception
     */
    public void updateTemperature() throws Exception {
            int rawValue = InterfaceKitPhidget.getInstance().getSensorRawValue(0);
            
            // 365 is artificial ambient temperature, 20C
            if (rawValue <= 365) {
                InterfaceKitPhidget.getInstance().setSensorRawValue(365);
                rawValue = 365;
            }
            
            if (InterfaceKitPhidget.getInstance().getOutputState(1)) {
                InterfaceKitPhidget.getInstance().setSensorRawValue(rawValue + Integer.parseInt(this.warmStep.getText()));
            } else {
                InterfaceKitPhidget.getInstance().setSensorRawValue(rawValue - Integer.parseInt(this.coolStep.getText()));
            }
    }

    class UpdateTemperatureTask extends TimerTask {
        IOHeaterUITest ui;
        
        public UpdateTemperatureTask(IOHeaterUITest ui) {
            this.ui = ui;
        }
        
        @Override
        public void run() {
            try {
                logger.info("Timer updating temperature...");
                this.ui.updateTemperature();
                logger.info("Timer updated temperature.");
            }
            catch (Exception e) {
                logger.log(Level.WARNING, "Unable to adjust raw temperature (threaded)", e);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        testButton = new javax.swing.JButton();
        warmStep = new javax.swing.JTextField();
        coolStep = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        timerToggleButton = new javax.swing.JToggleButton();
        timerInterval = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Test");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                IOHeaterUITest.this.windowOpened(evt);
            }
        });

        testButton.setText("Step");
        testButton.setToolTipText("");
        testButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testButtonActionPerformed(evt);
            }
        });

        warmStep.setText("3");
        warmStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                warmStepActionPerformed(evt);
            }
        });

        coolStep.setText("2");
        coolStep.setToolTipText("");

        jLabel1.setText("Warm");

        jLabel2.setText("Cool");
        jLabel2.setToolTipText("");

        timerToggleButton.setText("Timer");
        timerToggleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timerToggleButtonActionPerformed(evt);
            }
        });

        timerInterval.setText("500");
        timerInterval.setToolTipText("");
        timerInterval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                timerIntervalActionPerformed(evt);
            }
        });

        jLabel3.setText("Interval (ms)");
        jLabel3.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(testButton, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(warmStep, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                            .addComponent(coolStep)))
                    .addComponent(timerToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(timerInterval)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(warmStep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(coolStep, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(testButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(timerInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(timerToggleButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed
        try {
            updateTemperature();
        } catch (Exception pe) {
            logger.log(Level.WARNING, "Unable to adjust raw temperature", pe);
        }
    }//GEN-LAST:event_testButtonActionPerformed

    private void warmStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warmStepActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_warmStepActionPerformed

    private void windowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowOpened
        this.setLocation(350, 50);
    }//GEN-LAST:event_windowOpened

    private void timerToggleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timerToggleButtonActionPerformed
        if (this.timerToggleButton.isSelected()) {
            this.startTimer();
            this.testButton.setEnabled(false);
        } else {
            this.stopTimer();
            this.testButton.setEnabled(true);
        }
    }//GEN-LAST:event_timerToggleButtonActionPerformed

    private void timerIntervalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timerIntervalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_timerIntervalActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        IOHeaterUI.main(args);

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IOHeaterUITest.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new IOHeaterUITest().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField coolStep;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JButton testButton;
    private javax.swing.JTextField timerInterval;
    private javax.swing.JToggleButton timerToggleButton;
    private javax.swing.JTextField warmStep;
    // End of variables declaration//GEN-END:variables
}
